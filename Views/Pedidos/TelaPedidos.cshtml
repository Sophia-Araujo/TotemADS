@using TotemPWA.ViewModels
@model TelaPedidosViewModel

@{
    ViewData["Title"] = "Tela de Pedidos";
    Layout = "_LayoutPedidos";
}

<!-- BOTÃO VOLTAR -->
<div class="back-button-container">
    <button type="button" class="btn-back" onclick="history.back()" title="Voltar">
        <i class="fas fa-arrow-left"></i>
    </button>
</div>

<header>
    <img src="/image/banners/lanchesBanner.png" id="banner-image" alt="Banner de Hambúrguer">
</header>

<main>
    <!-- SIDEBAR LATERAL COM CATEGORIAS PRINCIPAIS -->
    <aside class="sidebarlateral">
        <button class="category active" onclick="mostrarTodosProdutos()">
            <span>Todos</span>
        </button>
        @foreach (var categoria in Model.Categorias)
        {
            <button class="category" onclick="filtrarPorCategoria(@categoria.CategoriaId, '@categoria.Nome', '@(categoria.Banner != null ? Url.Action("GetCategoriaImage", "Pedidos", new { id = categoria.CategoriaId, type = "banner" }) : "/image/banners/lanchesBanner.png")')">
                @if (categoria.Image != null && categoria.Image.Length > 0)
                {
                    <img src="@Url.Action("GetCategoriaImage", "Pedidos", new { id = categoria.CategoriaId, type = "image" })" alt="@categoria.Nome">
                }
                else
                {
                    <img src="/image/sidebar/@(categoria.Nome.ToLower()).png" alt="@categoria.Nome">
                }
                <span>@categoria.Nome</span>
            </button>
        }
    </aside>

    <!-- SIDEBAR DE SUBCATEGORIAS/FILTROS -->
    <aside class="sidebar">
        @foreach (var categoria in Model.Categorias)
        {
            @if (categoria.Subcategorias != null && categoria.Subcategorias.Any())
            {
                @foreach (var subcategoria in categoria.Subcategorias)
                {
                    <button class="cate" onclick="filtrarPorCategoria(@subcategoria.CategoriaId, '@subcategoria.Nome', '@(subcategoria.Banner != null ? Url.Action("GetCategoriaImage", "Pedidos", new { id = subcategoria.CategoriaId, type = "banner" }) : "/image/banners/lanchesBanner.png")')">>
                        <span>@subcategoria.Nome.ToUpper()</span>
                    </button>
                }
            }
        }
    </aside>

    <!-- PRODUTOS -->
    <section class="content">
        <div class="menu-section" id="produtos-section">
            <h2 id="titulo-produtos">Todos os Produtos</h2>
            <div class="menu">
                @foreach (var produto in Model.Produtos)
                {
                    <div class="card produto-item" data-categoria="@produto.CategoriaId">
                        @if (produto.Imagem != null && produto.Imagem.Length > 0)
                        {
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(produto.Imagem)"
                                 alt="@produto.Descricao" class="produto-img" />
                        }
                        else
                        {
                            <img src="/image/produtos/default.png"
                                 alt="@produto.Descricao" class="produto-img" />
                        }

                        <h3>@produto.Nome</h3>
                        <p>R$ @produto.Valor.ToString("F2")</p>
                        <span class="produto-descricao">@produto.Descricao</span>

                        <button class="add-to-cart" onclick="abrirModalPersonalizacao(@produto.ProdutoId, '@produto.Nome', '@produto.Descricao', @produto.Valor, '@(produto.Imagem != null ? Convert.ToBase64String(produto.Imagem) : "")')">Adicionar</button>
                    </div>
                }
            </div>
        </div>
    </section>

    <!-- MODAL DE PERSONALIZAÇÃO -->
    <div id="modal-personalizacao" class="popup-overlay" style="display: none;">
        <div class="popup-content">
            <h2 id="modal-produto-nome">Produto</h2>
            <p class="descricao-burguer" id="modal-produto-descricao">Descrição do produto</p>

            <div class="popup-main">
                <img id="modal-produto-imagem" src="/image/produtos/default.png" alt="Produto" class="popup-img" />

                <div class="ingredientes">
                    <div class="ingrediente">
                        <span>Personalização básica</span>
                        <span class="quantidade">1x</span>
                        <button class="menos" onclick="ajustarQuantidade(-1)">−</button>
                        <button class="mais" onclick="ajustarQuantidade(1)">+</button>
                    </div>
                    <div class="ingrediente">
                        <span>Extra molho</span>
                        <span class="quantidade">0x</span>
                        <button class="menos" onclick="ajustarIngrediente(this, -1)">−</button>
                        <button class="mais" onclick="ajustarIngrediente(this, 1)">+</button>
                    </div>
                    <div class="ingrediente">
                        <span>Bacon extra</span>
                        <span class="quantidade">0x</span>
                        <button class="menos" onclick="ajustarIngrediente(this, -1)">−</button>
                        <button class="mais" onclick="ajustarIngrediente(this, 1)">+</button>
                    </div>
                </div>
            </div>

            <div class="popup-buttons">
                <button id="btn-voltar-modal" class="btn-voltar" onclick="fecharModalPersonalizacao()">Voltar</button>
                <button id="btn-adicionar-carrinho" class="btn-adicionar-popup" onclick="adicionarAoCarrinho()">
                    Adicionar - R$ <span id="preco-modal">0,00</span>
                </button>
            </div>
        </div>
    </div>

    <!-- FOOTER -->
    <footer class="resumo-compra">
        <div class="resumo" id="resumo-carrinho">
            <p id="resumo-vazio" style="display: block;">Carrinho vazio</p>
        </div>
        <div class="acoes">
            <button class="btn-editar" onclick="editarPedido()" id="btn-editar" style="display: none;">Editar pedido</button>
            <button class="btn-pagar" onclick="finalizarPedido()" id="btn-pagar" style="display: none;">
                Pagar R$ <span id="total-pagar">0,00</span>
            </button>
            <button class="btn-cancelar" onclick="cancelarPedido()" id="btn-cancelar" style="display: none;">Cancelar</button>
        </div>
    </footer>
</main>

@section Scripts {
    <script>
        // Variáveis globais do carrinho
        let carrinho = [];
        let produtoSelecionado = null;
        let quantidadeProduto = 1;

        // Inicializar carrinho ao carregar a página
        document.addEventListener('DOMContentLoaded', function() {
            carregarCarrinho();
            atualizarResumoCarrinho();
        });

        // Funções de navegação e filtragem
        function mostrarTodosProdutos() {
            document.querySelectorAll('.category, .cate').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            document.querySelectorAll('.produto-item').forEach(item => item.style.display = 'block');
            document.getElementById('titulo-produtos').textContent = 'Todos os Produtos';
            document.getElementById('banner-image').src = '/image/banners/lanchesBanner.png';
        }

        function filtrarPorCategoria(categoriaId, nomeCategoria, bannerUrl) {
            document.querySelectorAll('.category, .cate').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            document.querySelectorAll('.produto-item').forEach(item => {
                item.style.display = item.dataset.categoria == categoriaId ? 'block' : 'none';
            });
            document.getElementById('titulo-produtos').textContent = nomeCategoria;
            
            if (bannerUrl && bannerUrl !== '') {
                document.getElementById('banner-image').src = bannerUrl;
            }
        }

        // Funções do modal de personalização
        function abrirModalPersonalizacao(produtoId, nome, descricao, valor, imagem) {
            produtoSelecionado = {
                id: produtoId,
                nome: nome,
                descricao: descricao,
                valor: valor,
                imagem: imagem
            };
            
            quantidadeProduto = 1;
            
            document.getElementById('modal-produto-nome').textContent = nome;
            document.getElementById('modal-produto-descricao').textContent = descricao;
            document.getElementById('preco-modal').textContent = valor.toFixed(2).replace('.', ',');
            
            if (imagem && imagem !== '') {
                document.getElementById('modal-produto-imagem').src = 'data:image/jpeg;base64,' + imagem;
            } else {
                document.getElementById('modal-produto-imagem').src = '/image/produtos/default.png';
            }
            
            // Reset quantidade no modal
            const quantidadeSpan = document.querySelector('.ingrediente .quantidade');
            quantidadeSpan.textContent = '1x';
            
            // Reset ingredientes extras
            const ingredientesExtras = document.querySelectorAll('.ingrediente:not(:first-child) .quantidade');
            ingredientesExtras.forEach(span => span.textContent = '0x');
            
            document.getElementById('modal-personalizacao').style.display = 'flex';
        }

        function fecharModalPersonalizacao() {
            document.getElementById('modal-personalizacao').style.display = 'none';
            produtoSelecionado = null;
            quantidadeProduto = 1;
        }

        function ajustarQuantidade(delta) {
            quantidadeProduto = Math.max(1, quantidadeProduto + delta);
            document.querySelector('.ingrediente .quantidade').textContent = quantidadeProduto + 'x';
            
            const precoTotal = (produtoSelecionado.valor * quantidadeProduto);
            document.getElementById('preco-modal').textContent = precoTotal.toFixed(2).replace('.', ',');
        }

        function ajustarIngrediente(button, delta) {
            const quantidadeSpan = button.parentElement.querySelector('.quantidade');
            let quantidade = parseInt(quantidadeSpan.textContent.replace('x', ''));
            quantidade = Math.max(0, quantidade + delta);
            quantidadeSpan.textContent = quantidade + 'x';
        }

        // Funções do carrinho
        function adicionarAoCarrinho() {
            if (!produtoSelecionado) return;
            
            const itemCarrinho = {
                id: produtoSelecionado.id,
                nome: produtoSelecionado.nome,
                descricao: produtoSelecionado.descricao,
                valor: produtoSelecionado.valor,
                quantidade: quantidadeProduto,
                imagem: produtoSelecionado.imagem,
                personalizacoes: obterPersonalizacoes()
            };
            
            // Verificar se já existe no carrinho
            const itemExistente = carrinho.find(item => 
                item.id === itemCarrinho.id && 
                JSON.stringify(item.personalizacoes) === JSON.stringify(itemCarrinho.personalizacoes)
            );
            
            if (itemExistente) {
                itemExistente.quantidade += itemCarrinho.quantidade;
            } else {
                carrinho.push(itemCarrinho);
            }
            
            salvarCarrinho();
            atualizarResumoCarrinho();
            fecharModalPersonalizacao();
            
            // Feedback visual
            mostrarNotificacao('Produto adicionado ao carrinho!');
        }

        function obterPersonalizacoes() {
            const personalizacoes = [];
            const ingredientes = document.querySelectorAll('.ingrediente:not(:first-child)');
            
            ingredientes.forEach(ingrediente => {
                const nome = ingrediente.querySelector('span').textContent;
                const quantidade = parseInt(ingrediente.querySelector('.quantidade').textContent.replace('x', ''));
                if (quantidade > 0) {
                    personalizacoes.push({ nome, quantidade });
                }
            });
            
            return personalizacoes;
        }

        function removerDoCarrinho(index) {
            carrinho.splice(index, 1);
            salvarCarrinho();
            atualizarResumoCarrinho();
        }

        function atualizarQuantidadeCarrinho(index, novaQuantidade) {
            if (novaQuantidade <= 0) {
                removerDoCarrinho(index);
            } else {
                carrinho[index].quantidade = novaQuantidade;
                salvarCarrinho();
                atualizarResumoCarrinho();
            }
        }

        function atualizarResumoCarrinho() {
            const resumoDiv = document.getElementById('resumo-carrinho');
            const resumoVazio = document.getElementById('resumo-vazio');
            const btnEditar = document.getElementById('btn-editar');
            const btnPagar = document.getElementById('btn-pagar');
            const btnCancelar = document.getElementById('btn-cancelar');
            const totalPagar = document.getElementById('total-pagar');
            
            if (carrinho.length === 0) {
                resumoVazio.style.display = 'block';
                btnEditar.style.display = 'none';
                btnPagar.style.display = 'none';
                btnCancelar.style.display = 'none';
                
                // Remover itens existentes
                const itensExistentes = resumoDiv.querySelectorAll('p:not(#resumo-vazio):not(.total)');
                itensExistentes.forEach(item => item.remove());
                
                // Manter linha do total com R$ 0,00
                let totalExistente = resumoDiv.querySelector('.total');
                if (!totalExistente) {
                    const pTotal = document.createElement('p');
                    pTotal.className = 'total';
                    pTotal.innerHTML = `Total: <span>R$ 0,00</span>`;
                    resumoDiv.appendChild(pTotal);
                } else {
                    totalExistente.innerHTML = `Total: <span>R$ 0,00</span>`;
                }
                
                // Atualizar botão pagar
                totalPagar.textContent = '0,00';
                
                return;
            }
            
            resumoVazio.style.display = 'none';
            btnEditar.style.display = 'inline-block';
            btnPagar.style.display = 'inline-block';
            btnCancelar.style.display = 'inline-block';
            
            // Limpar resumo existente (exceto o total)
            const itensExistentes = resumoDiv.querySelectorAll('p:not(#resumo-vazio):not(.total)');
            itensExistentes.forEach(item => item.remove());
            
            // Agrupar por categoria (simplificado)
            const categorias = {};
            let total = 0;
            
            carrinho.forEach(item => {
                const categoria = 'Produtos'; // Simplificado, você pode mapear por categoria real
                if (!categorias[categoria]) {
                    categorias[categoria] = { quantidade: 0, valor: 0 };
                }
                categorias[categoria].quantidade += item.quantidade;
                categorias[categoria].valor += item.valor * item.quantidade;
                total += item.valor * item.quantidade;
            });
            
            // Adicionar linhas do resumo
            Object.keys(categorias).forEach(categoria => {
                const cat = categorias[categoria];
                const p = document.createElement('p');
                p.innerHTML = `${categoria} ${cat.quantidade}x <span>R$ ${cat.valor.toFixed(2).replace('.', ',')}</span>`;
                resumoDiv.appendChild(p);
            });
            
            // Atualizar ou criar linha do total
            let totalExistente = resumoDiv.querySelector('.total');
            if (!totalExistente) {
                const pTotal = document.createElement('p');
                pTotal.className = 'total';
                pTotal.innerHTML = `Total: <span>R$ ${total.toFixed(2).replace('.', ',')}</span>`;
                resumoDiv.appendChild(pTotal);
            } else {
                totalExistente.innerHTML = `Total: <span>R$ ${total.toFixed(2).replace('.', ',')}</span>`;
            }
            
            // Atualizar botão pagar
            totalPagar.textContent = total.toFixed(2).replace('.', ',');
        }

        // Funções de persistência
        function salvarCarrinho() {
            localStorage.setItem('carrinho-totem', JSON.stringify(carrinho));
        }

        function carregarCarrinho() {
            const carrinhoSalvo = localStorage.getItem('carrinho-totem');
            if (carrinhoSalvo) {
                carrinho = JSON.parse(carrinhoSalvo);
            }
        }

        // Funções dos botões do footer
        function editarPedido() {
            // Implementar modal de edição ou redirecionar para tela de edição
            alert('Função de editar pedido - implementar conforme necessário');
        }

        function finalizarPedido() {
            if (carrinho.length === 0) {
                alert('Carrinho vazio!');
                return;
            }
            
            // Salvar dados do pedido e redirecionar
            localStorage.setItem('pedido-finalizar', JSON.stringify(carrinho));
            window.location.href = '/Home/telaItensPedidos';
        }

        function cancelarPedido() {
            if (confirm('Tem certeza que deseja cancelar o pedido?')) {
                carrinho = [];
                salvarCarrinho();
                atualizarResumoCarrinho();
            }
        }

        // Função para mostrar notificações
        function mostrarNotificacao(mensagem) {
            const notificacao = document.createElement('div');
            notificacao.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #4CAF50;
                color: white;
                padding: 15px 20px;
                border-radius: 5px;
                z-index: 9999;
                box-shadow: 0 2px 10px rgba(0,0,0,0.2);
                animation: slideIn 0.3s ease-out;
            `;
            notificacao.textContent = mensagem;
            
            document.body.appendChild(notificacao);
            
            setTimeout(() => {
                notificacao.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => {
                    if (notificacao.parentNode) {
                        notificacao.parentNode.removeChild(notificacao);
                    }
                }, 300);
            }, 3000);
        }

        // Fechar modal ao clicar fora
        document.getElementById('modal-personalizacao').addEventListener('click', function(e) {
            if (e.target === this) {
                fecharModalPersonalizacao();
            }
        });
    </script>
}