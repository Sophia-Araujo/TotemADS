@model TotemPWA.Models.Produto

@{
    ViewData["Title"] = "Editar Produto";
    Layout = "~/Views/Shared/_LayoutMenu.cshtml";
}

<div class="content-area">
    <div class="produtos-section">
        <div class="section-header">
            <div class="header-content">
                <h1>Editar Produto</h1>
                <p class="section-subtitle">Atualize as informações do produto</p>
            </div>
        </div>

        <div class="form-container">
            <form asp-action="Edit" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="ProdutoId" />

                <div class="form-group">
                    <label>Imagem Atual</label>
                    @if (Model.Imagem != null && Model.Imagem.Length > 0)
                    {
                        <div>
                            <img src="@Url.Action("ExibirImagem", new { id = Model.ProdutoId })" 
                                 alt="Imagem atual" 
                                 style="max-width: 200px; max-height: 200px; border: 1px solid #ddd; border-radius: 5px;" />
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">Nenhuma imagem cadastrada</p>
                    }
                </div>

                <div class="form-group">
                    <label for="imagemFile">Nova Imagem (opcional)</label>
                    <input type="file" name="imagemFile" id="imagemFile" class="form-control" accept="image/*" />
                    <small class="form-text">Deixe em branco para manter a imagem atual</small>
                </div>

                <div class="form-group">
                    <label asp-for="Nome">Nome do Produto</label>
                    <input asp-for="Nome" class="form-control" placeholder="Digite o nome do produto" />
                    <span asp-validation-for="Nome" class="text-danger"></span>
                </div>
                
                <div class="form-group">
                    <label asp-for="Descricao">Descrição</label>
                    <input asp-for="Descricao" class="form-control" placeholder="Digite a descrição do produto" />
                    <span asp-validation-for="Descricao" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Valor">Valor</label>
                    <input asp-for="Valor" class="form-control" type="number" step="0.01" min="0" placeholder="0,00" />
                    <span asp-validation-for="Valor" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="IsCombo">É Combo?</label>
                    <select asp-for="IsCombo" class="form-control" id="isComboSelect">
                        <option value="0">Não</option>
                        <option value="1">Sim</option>
                    </select>
                    <span asp-validation-for="IsCombo" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label>Administrador</label>
                    <p class="form-control-plaintext">@ViewBag.AdministradorCPF</p>
                    <input type="hidden" asp-for="AdministradorId" value="@ViewBag.AdministradorId" />
                    <span asp-validation-for="AdministradorId" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="CategoriaId">Categoria</label>
                    <select asp-for="CategoriaId" class="form-control" asp-items="ViewBag.CategoriaId">
                        <option value="">Selecione uma categoria</option>
                    </select>
                    <span asp-validation-for="CategoriaId" class="text-danger"></span>
                </div>

                <div class="form-group text-center">
                    <input type="submit" value="Salvar Alterações" class="btn btn-primary" />
                </div>
            </form>

            <div class="text-center mt-3">
                <a asp-action="Index" class="btn btn-secondary">Voltar para Lista</a>
                <a asp-action="Details" asp-route-id="@Model.ProdutoId" class="btn btn-secondary">Ver Detalhes</a>
                
                @* Botão dinâmico baseado no tipo do produto *@
                <span id="actionButtons">
                    @if (Model.IsCombo == 1)
                    {
                        <a href="~/ItensCombo?produtoId=@Model.ProdutoId" class="btn btn-primary">Editar Itens do Combo</a>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", "IgredienteProduto", new { produtoId = Model.ProdutoId })" class="btn btn-primary">Editar Ingredientes</a>
                    }
                </span>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        // Preview da imagem
        document.getElementById('imagemFile').addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const existingPreview = document.getElementById('imagePreview');
                    if (existingPreview) {
                        existingPreview.remove();
                    }
                    const img = document.createElement('img');
                    img.id = 'imagePreview';
                    img.src = e.target.result;
                    img.style.maxWidth = '200px';
                    img.style.maxHeight = '200px';
                    img.style.marginTop = '10px';
                    img.style.border = '1px solid #ddd';
                    img.style.borderRadius = '5px';

                    const label = document.createElement('small');
                    label.textContent = 'Nova imagem:';
                    label.style.display = 'block';
                    label.style.marginTop = '10px';
                    label.style.fontWeight = 'bold';

                    const container = document.getElementById('imagemFile').parentNode;
                    container.appendChild(label);
                    container.appendChild(img);
                };
                reader.readAsDataURL(file);
            }
        });

        // Função para atualizar o botão dinamicamente quando o tipo do produto mudar
        function updateActionButton() {
            const isCombo = document.getElementById('isComboSelect').value;
            const actionButtons = document.getElementById('actionButtons');
            const produtoId = @Model.ProdutoId;
            
            if (isCombo === '1') {
                // É combo - mostrar botão para editar itens do combo
                actionButtons.innerHTML = `
                    <a href="~/ItensCombo?produtoId=${produtoId}" class="btn btn-primary">Editar Itens do Combo</a>
                `;
            } else {
                // Não é combo - mostrar botão para editar ingredientes
                actionButtons.innerHTML = `
                    <a href="@Url.Action("Index", "IgredienteProduto")?produtoId=${produtoId}" class="btn btn-primary">Editar Ingredientes</a>
                `;
            }
        }

        // Adicionar evento para atualizar o botão quando o select mudar
        document.getElementById('isComboSelect').addEventListener('change', updateActionButton);
    </script>

    <link rel="stylesheet" href="~/css/editproduto.css" />
}